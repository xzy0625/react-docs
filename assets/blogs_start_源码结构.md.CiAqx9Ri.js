import{_ as e,c as i,ag as s,o as t}from"./chunks/framework.B883bhfp.js";const k=JSON.parse('{"title":"源码的组织结构","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/start/源码结构.md","filePath":"blogs/start/源码结构.md","lastUpdated":1734352047000}'),l={name:"blogs/start/源码结构.md"};function r(n,a,c,h,p,d){return t(),i("div",null,a[0]||(a[0]=[s(`<h1 id="源码的组织结构" tabindex="-1">源码的组织结构 <a class="header-anchor" href="#源码的组织结构" aria-label="Permalink to &quot;源码的组织结构&quot;">​</a></h1><h2 id="一-react最重要的三部分" tabindex="-1">一：react最重要的三部分 <a class="header-anchor" href="#一-react最重要的三部分" aria-label="Permalink to &quot;一：react最重要的三部分&quot;">​</a></h2><ol><li>Scheduler（调度器）—— 调度任务的优先级，高优任务优先进入Reconciler</li><li>Reconciler（协调器）—— 负责找出变化的组件</li><li>Renderer（渲染器）—— 负责将变化的组件渲染到页面上</li></ol><h2 id="二-顶层目录" tabindex="-1">二：顶层目录 <a class="header-anchor" href="#二-顶层目录" aria-label="Permalink to &quot;二：顶层目录&quot;">​</a></h2><p>除去配置文件和隐藏文件夹，根目录的文件夹包括三个：</p><p>根目录</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fixtures</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 包含一些给贡献者准备的小型 React 测试项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 包含元数据（比如 package.json）和 React 仓库中所有 package 的源码（子目录 src）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 各种工具链的脚本，比如git、jest、eslint等</span></span></code></pre></div><p>这里我们关注packages目录</p><h3 id="packages目录" tabindex="-1">packages目录 <a class="header-anchor" href="#packages目录" aria-label="Permalink to &quot;packages目录&quot;">​</a></h3><p>目录下的文件夹非常多，我们来看下：</p><h4 id="react-opens-new-window-文件夹" tabindex="-1">react (opens new window)文件夹 <a class="header-anchor" href="#react-opens-new-window-文件夹" aria-label="Permalink to &quot;react (opens new window)文件夹&quot;">​</a></h4><p>React的核心，包含所有全局 React API，如：</p><ul><li>React.createElement</li><li>React.Component</li><li>React.Children</li></ul><p>这些 API 是全平台通用的，它不包含ReactDOM、ReactNative等平台特定的代码。在 NPM 上作为单独的一个包发布。</p><h4 id="scheduler-文件夹" tabindex="-1">scheduler 文件夹 <a class="header-anchor" href="#scheduler-文件夹" aria-label="Permalink to &quot;scheduler 文件夹&quot;">​</a></h4><p>Scheduler（调度器）的实现。</p><h4 id="shared-文件夹" tabindex="-1">shared 文件夹 <a class="header-anchor" href="#shared-文件夹" aria-label="Permalink to &quot;shared 文件夹&quot;">​</a></h4><p>源码中其他模块公用的方法和全局变量，比如在shared/ReactSymbols.js (opens new window)中保存React不同组件类型的定义。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> let REACT_ELEMENT_TYPE = 0xeac7;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> let REACT_PORTAL_TYPE = 0xeaca;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> let REACT_FRAGMENT_TYPE = 0xeacb;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><h4 id="renderer相关的文件夹" tabindex="-1">Renderer相关的文件夹 <a class="header-anchor" href="#renderer相关的文件夹" aria-label="Permalink to &quot;Renderer相关的文件夹&quot;">​</a></h4><p>如下几个文件夹为对应的Renderer</p><ul><li>react-art</li><li>react-dom # 注意这同时是DOM和SSR（服务端渲染）的入口</li><li>react-native-renderer</li><li>react-noop-renderer # 用于debug fiber（后面会介绍fiber）</li><li>react-test-renderer</li></ul><h4 id="试验性包的文件夹" tabindex="-1">试验性包的文件夹 <a class="header-anchor" href="#试验性包的文件夹" aria-label="Permalink to &quot;试验性包的文件夹&quot;">​</a></h4><p>React将自己流程中的一部分抽离出来，形成可以独立使用的包，由于他们是试验性质的，所以不被建议在生产环境使用。包括如下文件夹：</p><ul><li>react-server # 创建自定义SSR流</li><li>react-client # 创建自定义的流</li><li>react-fetch # 用于数据请求</li><li>react-interactions # 用于测试交互相关的内部特性，比如React的事件模型</li><li>react-reconciler # Reconciler的实现，你可以用他构建自己的Renderer #辅助包的文件夹 React将一些辅助功能形成单独的包。包括如下文件夹：</li><li>react-is # 用于测试组件是否是某类型</li><li>react-client # 创建自定义的流</li><li>react-fetch # 用于数据请求</li><li>react-refresh # “热重载”的React官方实现</li></ul><h4 id="react-reconciler-文件夹" tabindex="-1">react-reconciler 文件夹 <a class="header-anchor" href="#react-reconciler-文件夹" aria-label="Permalink to &quot;react-reconciler 文件夹&quot;">​</a></h4><p>我们需要重点关注react-reconciler，在接下来源码学习中 80%的代码量都来自这个包。</p>`,27)]))}const u=e(l,[["render",r]]);export{k as __pageData,u as default};
