import{_ as i,c as a,ag as n,o as l}from"./chunks/framework.B883bhfp.js";const p="/react-docs/assets/image-20230413150726800.CZhB_D3W.png",t="/react-docs/assets/image-20230413152246018.CaeI-HEb.png",e="/react-docs/assets/image-20230413154257835.BaCM2jF1.png",h="/react-docs/assets/image-20230413155024938.Xhr7yqUW.png",k="/react-docs/assets/image-20230413202114129.BfYK64x5.png",r="/react-docs/assets/image-20230413202045505.Cx9uBs5p.png",E="/react-docs/assets/image-20230413203347061.BkEPa2Ny.png",m=JSON.parse('{"title":"如何调试源码","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/start/如何调试源码.md","filePath":"blogs/start/如何调试源码.md","lastUpdated":1734349431000}'),d={name:"blogs/start/如何调试源码.md"};function c(o,s,g,F,y,u){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="如何调试源码" tabindex="-1">如何调试源码 <a class="header-anchor" href="#如何调试源码" aria-label="Permalink to &quot;如何调试源码&quot;">​</a></h1><h2 id="一-react工程组织流程" tabindex="-1">一：react工程组织流程 <a class="header-anchor" href="#一-react工程组织流程" aria-label="Permalink to &quot;一：react工程组织流程&quot;">​</a></h2><h2 id="二-下载指定版本的react并初始化" tabindex="-1">二：下载指定版本的react并初始化 <a class="header-anchor" href="#二-下载指定版本的react并初始化" aria-label="Permalink to &quot;二：下载指定版本的react并初始化&quot;">​</a></h2><ol><li><a href="https://github.com/facebook/react/tree/v18.2.0" target="_blank" rel="noreferrer">指引🔗：</a></li><li>找到指定版本的tag,react每发布一个版本都会打一个tag，我们在本地新建一个分支切换到指定tag上就好，例如 <code>git checkout -b myTest v18.2.0</code></li><li>安装依赖 <code>yarn</code></li></ol><h2 id="三-新建一个react项目" tabindex="-1">三：新建一个react项目 <a class="header-anchor" href="#三-新建一个react项目" aria-label="Permalink to &quot;三：新建一个react项目&quot;">​</a></h2><p><code>npx create-react-app react-demo</code> 注意：项目请使用对应的react版本，如果版本不对请手动更改react依赖到指定版本</p><h2 id="四-用-vscode-调试-react-项目" tabindex="-1">四：用 VSCode 调试 React 项目 <a class="header-anchor" href="#四-用-vscode-调试-react-项目" aria-label="Permalink to &quot;四：用 VSCode 调试 React 项目&quot;">​</a></h2><ol><li><p>添加一个 VSCode 的 debugger 配置,在根目录下建一个 .vscode/launch.json 的文件，添加一个 chrome 类型的调试配置，输入调试的 url。 具体配置可查看<a href="https://code.visualstudio.com/docs/nodejs/browser-debugging#nodejs-articles" target="_blank" rel="noreferrer">VSCode官方文档</a>。这里要注意url和webRoot，如果需要调试的文件不在项目的跟路径下，这里需要改一下webRoot，加上对应的路径就好。同时也需要注意这里需要打开sourceMap才能启用vscode的sourceMap功能。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用 IntelliSense 了解相关属性。 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 悬停以查看现有属性的描述。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.2.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;configurations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chrome&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;launch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Launch chrome&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;webRoot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${workspaceFolder}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>点击debugger就可以开始调试react源码了</p><img src="`+p+`" style="zoom:50%;"></li><li><p>这里我们调试的时候看到的react源码都是react<code>build</code>之后发在npm上的，所以我们无法对应到react源码中最初的代码，这时候就需要使用sourceMap来处理了。代码位于<code>scripts/rollup/build.js</code>路径下面</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRollupOutputOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  outputPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  globals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  globalName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  bundleType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isProduction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isProductionBundleType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bundleType);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file: outputPath,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    globals,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    freeze: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isProduction,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    interop: getRollupInteropValue,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: globalName,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourcemap: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 新增sourcemao</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourcemapPathTransform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sourcemap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> relative.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../../../../packages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/xxx/Desktop/reactSource/react18/packages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 改成绝对定位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    esModule: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    exports: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;auto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>可以看到原本的build是没有输出sourceMap的，我们这里更改为true，然后执行build命令。发现报错</p></li></ol><img src="`+t+`" alt="image-20230413152246018" style="zoom:50%;"><blockquote><p>原因：某个转换的插件没有生成 sourcemap。</p><p>这个是因为构建的过程中会进行多次转换，会生成多次 sourcemap，然后把 sourcemap 串联起来就是最终的 sourcemap。如果中间有一步转换没有生成 sourcemap，那就断掉了，也就没法把 sourcemap 串联起来了。</p><p>这个问题的解决只要找出没有生成 sourcemap 的那几个插件注释掉就可以了：</p><p>我们在<code>getPlugins</code>函数中注释以下插件</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderChunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Wrappers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrapBundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   source,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   bundleType,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   globalName,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   filename,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   moduleType,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   bundle.wrapWithModuleBoundaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><p>这个是添加一些头部的代码的，比如 Lisence 等。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>shouldStayReadable &amp;&amp;</span></span>
<span class="line"><span>prettier({</span></span>
<span class="line"><span>parser: &#39;flow&#39;,</span></span>
<span class="line"><span>singleQuote: false,</span></span>
<span class="line"><span>trailingComma: &#39;none&#39;,</span></span>
<span class="line"><span>bracketSpacing: true,</span></span>
<span class="line"><span>}),</span></span></code></pre></div><p>这个是用 prettier 格式化代码的。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isProduction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bundleType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ESM_PROD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closure(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compilation_level:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SIMPLE&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> language_in:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ECMASCRIPT_2020&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> language_out:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bundleType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NODE_ES2015</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ECMASCRIPT_2020&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundleType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BROWSER_SCRIPT</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ECMASCRIPT5&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ECMASCRIPT5_STRICT&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emit_use_strict:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bundleType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BROWSER_SCRIPT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bundleType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ESM_PROD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bundleType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ESM_DEV,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> env:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CUSTOM&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> warning_level:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;QUIET&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apply_input_source_maps:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use_types_for_optimization:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process_common_js_modules:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rewrite_polyfills:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject_libraries:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> allow_dynamic_import:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Don&#39;t let it create global variables in the browser.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> // https://github.com/facebook/react/issues/10909</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assume_function_wrapper: !isUMDBundle,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> renaming: !shouldStayReadable,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}),</span></span></code></pre></div><p>用来压缩代码，去掉空白</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[&#39;&quot;]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">use strict</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[&quot;&#39;]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><p>删除&#39;use strict&#39;</p><p>tips：如果还有报错，检查下错误提示，看下哪个插件不能用</p></blockquote><ol start="5"><li><p>重新执行build命令，就可以看到打包了sourceMap文件，但是我们会发现build出来的map文件没有内容，这是因为react使用了flow作为静态类型检查，在打包的时候会用到flow-remove-types这个插件进行类型过滤。但是使用这个插件的时候没有考虑到<code>sourceMap</code>的生成，我们改下这个插件的代码即可</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rollup-plugin-flow-remove-types&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transformed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flowRemoveTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code, { pretty: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里加上{ pretty: true }配置即可</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      code: transformed.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      map: transformed.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div></li><li><p>这时候我们可以通过将react和react-dom文件夹复制到我们的项目node_modules中去，替换掉从npm上下载的没有sourceMap文件的包。但是要注意这个时候我们还是不能从我们项目的代码直接调试到react的源码中。原因是我们的项目在进行webpack打包的时候也进行了一次react.development.js到bundles.js的打包，相当于要找到源码的位置需要进行两次sourceMap的查找。调试的时候浏览器只会找一次。</p></li></ol><img src="`+e+'" alt="image-20230413154257835" style="zoom:50%;"><ol start="7"><li>所以我们只要干掉webpack打包这一步就可以实现bundle.js到react源码的映射了。webpack 支持 externals 来配置一些模块使用全局变量而不进行打包，这样我们就可以单独加载 react、react-dom，然后把他们导出的全局变量配置到 externals 就行了。我们在项目中使用<code>npm run eject</code>命令暴露出webpack配置进行更改即可</li></ol><img src="'+h+'" alt="image-20230413155024938" style="zoom:50%;"><p>然后我们把这两个文件在HTML中当作全局引用</p><p><img src="'+k+'" alt="image-20230413202114129"></p><ol start="8"><li><p>之后就可以直接调试源码中的文件了</p><img src="'+r+'" style="zoom:50%;"></li><li><p>要实现点击调用栈跳转源码位置我们需要将react和react-demo放入同一个工作目录中，并且更改一下sourceMap的生成路径，使用绝对路径而不是相对路径。</p><img src="'+E+'" alt="image-20230413203347061" style="zoom:50%;"></li></ol><h2 id="错误排查" tabindex="-1">错误排查 <a class="header-anchor" href="#错误排查" aria-label="Permalink to &quot;错误排查&quot;">​</a></h2><ol><li>如果遇到调试不能走到react源码中，请检查package.json中type是否设置为module模块类型</li></ol><p>这样我们就可以愉快的在vscode中调试我们的react源码啦</p>',20)]))}const B=i(d,[["render",c]]);export{m as __pageData,B as default};
